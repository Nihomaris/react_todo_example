{"version":3,"sources":["components/header/index.js","components/item/index.js","components/input-field/index.js","containers/todo/index.js","store/actions/index.js","store/constants/index.js","App.js","serviceWorker.js","store/reducers/todo.js","store/reducers/index.js","index.js","store/index.js"],"names":["Header","removeTodo","className","onClick","Item","todo","toggleTodo","index","text","complete","InputField","createTodo","useState","setText","refAlert","useRef","createNewToDo","current","hide","trim","replace","length","validateText","show","popover","Popover","id","Title","as","Content","e","Form","Group","controlId","OverlayTrigger","ref","trigger","placement","overlay","Control","type","onKeyPress","event","key","preventDefault","onChange","target","value","connect","state","toDoList","dispatch","data","payload","map","item","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","newToDoList","push","filter","splice","store","middleware","thunk","enhancer","compose","applyMiddleware","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0696f046.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.scss'\n\nimport Delete from '@material-ui/icons/Delete'\n\nfunction Header({ removeTodo }) {\n  return (\n    <div className=\"header\">\n      <div className=\"header__title\">TODO list</div>\n      <div className=\"header__remove\"><Delete onClick={() => removeTodo()} /></div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react'\n\nimport './style.scss'\nimport RadioButtonUnchecked from '@material-ui/icons/RadioButtonUnchecked'\nimport RadioButtonChecked from '@material-ui/icons/RadioButtonChecked'\n\nfunction Item({ todo, toggleTodo, index }) {\n  const { text, complete } = todo; \n\n  return (\n    <div className=\"item\" onClick={() => toggleTodo(index)}>\n      <div className=\"item__indicator\">\n        { complete ? <RadioButtonChecked /> : <RadioButtonUnchecked /> }\n      </div>\n      <div className={`item__text ${complete ? 'item__text_complete' : ''}`}>{ text }</div>\n    </div>\n  );\n}\n\nexport default Item;","import React, {useState, useRef} from 'react';\n\nimport Add from '@material-ui/icons/Add'\nimport { Form, Popover, OverlayTrigger } from 'react-bootstrap';\n\nimport './style.scss'\n\nfunction InputField({ createTodo }) {\n  const [text, setText] = useState('')\n  const refAlert = useRef(null);\n\n  const validateText = text => {\n    if(text === '') return false;\n    if(text.trim() === '') return false;\n    if(text.replace(/\\s+/g,'').length < 3) return false;\n\n    return true;\n  }\n\n  const createNewToDo = () => {\n    refAlert.current.hide();\n\n    if(validateText(text)) {\n      createTodo(text);\n      setText('')\n    } else {\n      refAlert.current.show();\n    }\n  }\n\n  const keyPressed = (event) => {\n    refAlert.current.hide();\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      createNewToDo()\n    }\n  }\n\n  const popover = (\n    <Popover id=\"popover-basic\">\n      <Popover.Title as=\"h3\">Ошибка в названии задачи</Popover.Title>\n      <Popover.Content>\n          Поле не должно быть пустое, содержать только пробелы и количество символов без учета пробелов не должно быть меньше 3х\n      </Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <div className=\"input-field\">\n      <div className=\"input-field__indicator\" onClick={e => createNewToDo()}>\n        <Add />\n      </div>\n      <Form className=\"input-field__form\">\n        <Form.Group controlId=\"formBasicEmail\" className=\"input-field__form-group\">\n          <OverlayTrigger ref={refAlert} trigger=\"manual\" placement=\"top\" overlay={popover}>\n            <Form.Control type=\"text\" onKeyPress={keyPressed} onChange={e => setText(e.target.value)} value={text} />\n          </OverlayTrigger>\n        </Form.Group>\n\n      </Form>\n    </div>\n  );\n}\n\nexport default InputField;\n","import React from 'react';\nimport { connect } from \"react-redux\";\n\nimport './style.scss'\n\nimport { createTodo, removeTodo, toggleTodo } from '../../store/actions'\n\nimport Header from '../../components/header'\nimport Item from '../../components/item'\nimport InputField from '../../components/input-field'\n\nfunction App({ toDoList, toggleTodo, createTodo, removeTodo }) {\n  return (\n    <div className=\"todo-widget\">\n        <div className=\"todo-widget__header\">\n            <Header removeTodo={removeTodo} />\n        </div>\n        <div className=\"todo-widget__body\">\n            { toDoList.map((item, index) => <Item todo={item} toggleTodo={toggleTodo} index={index} key={index} />) }\n        </div>\n        <div className=\"todo-widget__create\">\n            <InputField createTodo={createTodo} />\n        </div>\n    </div>\n\n  );\n}\n\nconst mapStateToProps = state => ({\n\ttoDoList: state.todo.toDoList,\n});\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tcreateTodo: data => {\n\t\t\tdispatch(createTodo(data))\n\t\t},\n\t\tremoveTodo: data => {\n\t\t\tdispatch(removeTodo(data))\n        },\n\t\ttoggleTodo: data => {\n\t\t\tdispatch(toggleTodo(data))\n\t\t}\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CREATE_TODO, REMOVE_TODO, TOGGLE_TODO } from '../constants'\n\nexport const createTodo = (todo) => {\n    return dispatch => {\n        dispatch({ type: CREATE_TODO, payload: todo })\n    }\n}\n\nexport const removeTodo = () => {\n    return dispatch => {\n        dispatch({ type: REMOVE_TODO })\n    }\n}\n\nexport const toggleTodo = (index) => {\n    return dispatch => {\n        dispatch({ type: TOGGLE_TODO, payload: index })\n    }\n}","export const CREATE_TODO = 'CREATE_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Todo from './containers/todo'\n\nfunction App() {\n  return (\n    <div>\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CREATE_TODO, REMOVE_TODO, TOGGLE_TODO } from '../constants'\n\nconst initialState = {\n    toDoList: [\n      {\n        text: 'Покормить собаку',\n        complete: false,\n      },\n      {\n        text: 'Покушать',\n        complete: false,\n      },\n      {\n        text: 'Сходить в магазин',\n        complete: false,\n      },\n    ]\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n\n        /**\n         * Добавляем дело\n         */\n        case CREATE_TODO: {\n          const newToDoList = [...state.toDoList];\n          const text = action.payload;\n\n          newToDoList.push({text: text, complete: false})\n\n          return {\n            ...state, toDoList: newToDoList\n          };\n        }\n\n        /**\n         * Удалем законченные дела\n         */\n        case REMOVE_TODO: {\n          const newToDoList = state.toDoList.filter(item => !item.complete)\n\n          return {\n            ...state, toDoList: newToDoList\n          };\n        }\n\n        /**\n         * Меняем статус дела Закончено\\Не закончено\n         */\n        case TOGGLE_TODO: {\n          const newToDoList = [...state.toDoList];\n          const index = action.payload;\n          \n          newToDoList.splice(index, 1, { \n            text: newToDoList[index].text, \n            complete: !newToDoList[index].complete \n          })\n\n          return {\n            ...state, toDoList: newToDoList\n          };\n        }\n        default: {\n\t\t\t\t\treturn {\n            ...state\n\t\t\t\t\t};\n        }\n    }\n}   ","import {combineReducers} from 'redux'\nimport todo from './todo'\n\nexport default combineReducers({\n    todo\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store';\n\nexport const store = createStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport reducer from './reducers';\n\nexport default () => {\n  const middleware = [\n    thunk\n  ];\n\n  const enhancer = compose(\n    process.env.NODE_ENV !== 'production'\n      ? (() => {\n        const composeEnhancers = composeWithDevTools({\n          trace: true,\n          traceLimit: 25\n        });\n        return composeEnhancers(applyMiddleware(...middleware))\n      })()\n      : applyMiddleware(...middleware)\n  );\n\n  return createStore(\n    reducer,\n    enhancer\n  );\n};"],"sourceRoot":""}